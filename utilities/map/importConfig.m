function levelConfigs = importConfig(filedir)
    %readMapLog Read the map configuration generated by Unity
    %   INPUT: file directory that contains all level configs
    %   OUTPUT: a struct containing timing and map information
    %           timestamp | size | blocks
    %   use importConfig('default') to import the default config
    
        if strcmp(filedir, 'default')
            filedir = 'data/map_config';
        end
        levelNo = [4, 5 ,1];
        chptrNo = 3;
        count = 0;
    
        % import map configs as struct
        levelConfigs = struct('chapter', {}, 'level', {}, 'size', {}, 'blocks', {}, 'version', {});
        for i = 1 : chptrNo
            for j = 1 : levelNo(i)
                count = count + 1;
                filename = [filedir, '/map_chp_', num2str(i), '_lvl_', num2str(j), '.json'];
                text = fileread(filename);
                config = jsondecode(text);
                levelConfigs(count) = struct('chapter', i, 'level', j, 'size', config.size, 'blocks', config.blocks, 'version', 0);
            end
        end

        i = 2;
        for j = 4:5
            count = count + 1;
            filename = [filedir, '/map_chp_', num2str(i), '_lvl_', num2str(j), '_hot.json'];
            text = fileread(filename);
            config = jsondecode(text);
            levelConfigs(count) = struct('chapter', i, 'level', j, 'size', config.size, 'blocks', config.blocks, 'version', 1);
        end
        
        gridMap = arrayfun(@(x) blockList2mapArray(x, false), levelConfigs, 'UniformOutput', false);
        [levelConfigs(:).gridmap] = deal(gridMap{:});
        clear gridMap
        
        [r, s, p] = arrayfun(@(x) gameLogicAnalyzer(x), levelConfigs, 'UniformOutput', false);
        [levelConfigs(:).ruleGraph] = deal(r{:});
        [levelConfigs(:).spriteClusters]  = deal(s{:});
        [levelConfigs(:).propertyClusters]  = deal(p{:});

        gridMap = arrayfun(@(x) blockList2mapArray(x, false), levelConfigs, 'UniformOutput', false);
        [levelConfigs(:).gridmap] = deal(gridMap{:});
    end
    
    